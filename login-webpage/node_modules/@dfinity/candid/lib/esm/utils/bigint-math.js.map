{"version":3,"file":"bigint-math.js","sourceRoot":"","sources":["../../../src/utils/bigint-math.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AACH,MAAM,UAAU,KAAK,CAAC,CAAkB;IACtC,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACvB,IAAI,CAAC,IAAI,CAAC,EAAE;QACV,MAAM,IAAI,UAAU,CAAC,wBAAwB,CAAC,CAAC;KAChD;IACD,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;AACrC,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,KAAK,CAAC,CAAkB;IACtC,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACvB,IAAI,CAAC,GAAG,CAAC,EAAE;QACT,MAAM,IAAI,UAAU,CAAC,4BAA4B,CAAC,CAAC;KACpD;IACD,OAAO,MAAM,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;AAC3B,CAAC","sourcesContent":["/**\n * Equivalent to `Math.log2(n)` with support for `BigInt` values\n *\n * @param n bigint or integer\n * @returns integer\n */\nexport function ilog2(n: bigint | number): number {\n  const nBig = BigInt(n);\n  if (n <= 0) {\n    throw new RangeError('Input must be positive');\n  }\n  return nBig.toString(2).length - 1;\n}\n\n/**\n * Equivalent to `2 ** n` with support for `BigInt` values\n * (necessary for browser preprocessors which replace the `**` operator with `Math.pow`)\n *\n * @param n bigint or integer\n * @returns bigint\n */\nexport function iexp2(n: bigint | number): bigint {\n  const nBig = BigInt(n);\n  if (n < 0) {\n    throw new RangeError('Input must be non-negative');\n  }\n  return BigInt(1) << nBig;\n}\n"]}