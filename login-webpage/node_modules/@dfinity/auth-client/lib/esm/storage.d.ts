import { IdbKeyVal } from './db';
export declare const KEY_STORAGE_KEY = "identity";
export declare const KEY_STORAGE_DELEGATION = "delegation";
export declare const KEY_VECTOR = "iv";
export declare const DB_VERSION = 1;
export declare const isBrowser: boolean;
export declare type StoredKey = string | CryptoKeyPair;
/**
 * Interface for persisting user authentication data
 */
export interface AuthClientStorage {
    get(key: string): Promise<StoredKey | null>;
    set(key: string, value: StoredKey): Promise<void>;
    remove(key: string): Promise<void>;
}
/**
 * Legacy implementation of AuthClientStorage, for use where IndexedDb is not available
 */
export declare class LocalStorage implements AuthClientStorage {
    readonly prefix: string;
    private readonly _localStorage?;
    constructor(prefix?: string, _localStorage?: Storage | undefined);
    get(key: string): Promise<string | null>;
    set(key: string, value: string): Promise<void>;
    remove(key: string): Promise<void>;
    private _getLocalStorage;
}
/**
 * IdbStorage is an interface for simple storage of string key-value pairs built on {@link IdbKeyVal}
 *
 * It replaces {@link LocalStorage}
 * @see implements {@link AuthClientStorage}
 */
export declare class IdbStorage implements AuthClientStorage {
    private initializedDb;
    get _db(): Promise<IdbKeyVal>;
    get(key: string): Promise<string | null>;
    set(key: string, value: string): Promise<void>;
    remove(key: string): Promise<void>;
}
