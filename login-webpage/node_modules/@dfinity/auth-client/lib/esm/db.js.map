{"version":3,"file":"db.js","sourceRoot":"","sources":["../../src/db.ts"],"names":[],"mappings":"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","sourcesContent":["import { openDB, IDBPDatabase } from 'idb';\nimport { isBrowser, KEY_STORAGE_DELEGATION, KEY_STORAGE_KEY } from './storage';\n\ntype Database = IDBPDatabase<unknown>;\ntype IDBValidKey = string | number | Date | BufferSource | IDBValidKey[];\nconst AUTH_DB_NAME = 'auth-client-db';\nconst OBJECT_STORE_NAME = 'ic-keyval';\n\nconst _openDbStore = async (\n  dbName = AUTH_DB_NAME,\n  storeName = OBJECT_STORE_NAME,\n  version: number,\n) => {\n  // Clear legacy stored delegations\n  if (isBrowser && localStorage?.getItem(KEY_STORAGE_DELEGATION)) {\n    localStorage.removeItem(KEY_STORAGE_DELEGATION);\n    localStorage.removeItem(KEY_STORAGE_KEY);\n  }\n  return await openDB(dbName, version, {\n    upgrade: database => {\n      database.objectStoreNames;\n      if (database.objectStoreNames.contains(storeName)) {\n        database.clear(storeName);\n      }\n      database.createObjectStore(storeName);\n    },\n  });\n};\n\nasync function _getValue<T>(\n  db: Database,\n  storeName: string,\n  key: IDBValidKey,\n): Promise<T | undefined> {\n  return await db.get(storeName, key);\n}\n\nasync function _setValue<T>(\n  db: Database,\n  storeName: string,\n  key: IDBValidKey,\n  value: T,\n): Promise<IDBValidKey> {\n  return await db.put(storeName, value, key);\n}\n\nasync function _removeValue(db: Database, storeName: string, key: IDBValidKey): Promise<void> {\n  return await db.delete(storeName, key);\n}\n\nexport type DBCreateOptions = {\n  dbName?: string;\n  storeName?: string;\n  version?: number;\n};\n\n/**\n * Simple Key Value store\n * Defaults to `'auth-client-db'` with an object store of `'ic-keyval'`\n */\nexport class IdbKeyVal {\n  /**\n   *\n   * @param {DBCreateOptions} options {@link DbCreateOptions}\n   * @param {DBCreateOptions['dbName']} options.dbName name for the indexeddb database\n   * @default 'auth-client-db'\n   * @param {DBCreateOptions['storeName']} options.storeName name for the indexeddb Data Store\n   * @default 'ic-keyval'\n   * @param {DBCreateOptions['version']} options.version version of the database. Increment to safely upgrade\n   * @constructs an {@link IdbKeyVal}\n   */\n  public static async create(options?: DBCreateOptions): Promise<IdbKeyVal> {\n    const { dbName = AUTH_DB_NAME, storeName = OBJECT_STORE_NAME, version = 1 } = options ?? {};\n    const db = await _openDbStore(dbName, storeName, version);\n    return new IdbKeyVal(db, storeName);\n  }\n\n  // Do not use - instead prefer create\n  private constructor(private _db: Database, private _storeName: string) {}\n\n  /**\n   * Basic setter\n   * @param {IDBValidKey} key string | number | Date | BufferSource | IDBValidKey[]\n   * @param value value to set\n   * @returns void\n   */\n  public async set<T>(key: IDBValidKey, value: T) {\n    return await _setValue<T>(this._db, this._storeName, key, value);\n  }\n  /**\n   * Basic getter\n   * Pass in a type T for type safety if you know the type the value will have if it is found\n   * @param {IDBValidKey} key string | number | Date | BufferSource | IDBValidKey[]\n   * @returns `Promise<T | null>`\n   * @example\n   * await get<string>('exampleKey') -> 'exampleValue'\n   */\n  public async get<T>(key: IDBValidKey): Promise<T | null> {\n    return (await _getValue<T>(this._db, this._storeName, key)) ?? null;\n  }\n\n  /**\n   * Remove a key\n   * @param key {@link IDBValidKey}\n   * @returns void\n   */\n  public async remove(key: IDBValidKey) {\n    return await _removeValue(this._db, this._storeName, key);\n  }\n}\n"]}