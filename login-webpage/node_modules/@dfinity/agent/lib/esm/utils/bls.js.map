{"version":3,"file":"bls.js","sourceRoot":"","sources":["../../../src/utils/bls.ts"],"names":[],"mappings":"AAAA,OAAO,IAAI,EAAE,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,mBAAmB,CAAC;AAE/D,MAAM,CAAC,IAAI,MAAqE,CAAC;AAEjF;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,SAAS,CAC7B,EAAc,EACd,GAAe,EACf,GAAe;IAEf,IAAI,CAAC,MAAM,EAAE;QACX,MAAM,IAAI,EAAE,CAAC;QACb,IAAI,QAAQ,EAAE,KAAK,CAAC,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SAC1C;QACD,MAAM,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE;YAC3B,yDAAyD;YACzD,OAAO,UAAU,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;QAC3C,CAAC,CAAC;KACH;IACD,OAAO,MAAM,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AAC9B,CAAC","sourcesContent":["import init, { bls_init, bls_verify } from '../vendor/bls/bls';\n\nexport let verify: (pk: Uint8Array, sig: Uint8Array, msg: Uint8Array) => boolean;\n\n/**\n *\n * @param pk primary key: Uint8Array\n * @param sig signature: Uint8Array\n * @param msg message: Uint8Array\n * @returns Promise resolving a boolean\n */\nexport async function blsVerify(\n  pk: Uint8Array,\n  sig: Uint8Array,\n  msg: Uint8Array,\n): Promise<boolean> {\n  if (!verify) {\n    await init();\n    if (bls_init() !== 0) {\n      throw new Error('Cannot initialize BLS');\n    }\n    verify = (pk1, sig1, msg1) => {\n      // Reorder things from what the WASM expects (sig, m, w).\n      return bls_verify(sig1, msg1, pk1) === 0;\n    };\n  }\n  return verify(pk, sig, msg);\n}\n"]}