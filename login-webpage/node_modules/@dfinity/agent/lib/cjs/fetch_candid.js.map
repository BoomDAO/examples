{"version":3,"file":"fetch_candid.js","sourceRoot":"","sources":["../../src/fetch_candid.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kDAA+C;AAC/C,uEAAyD;AAEzD,uCAAyC;AACzC,mCAA+C;AAE/C;;;;;;GAMG;AACI,KAAK,UAAU,WAAW,CAAC,UAAkB,EAAE,KAAiB;IACrE,IAAI,CAAC,KAAK,EAAE;QACV,2DAA2D;QAC3D,KAAK,GAAG,IAAI,gBAAS,EAAE,CAAC;QACxB,IAAI,KAAK,CAAC,OAAO,EAAE,EAAE;YACnB,KAAK,CAAC,YAAY,EAAE,CAAC;SACtB;KACF;IAED,mCAAmC;IACnC,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,OAAO,CAAC;QAC1C,KAAK;QACL,UAAU,EAAE,qBAAS,CAAC,QAAQ,CAAC,UAAU,CAAC;QAC1C,KAAK,EAAE,CAAC,QAAQ,CAAC;KAClB,CAAC,CAAC;IACH,MAAM,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAuB,CAAC;IAC1D,IAAI,MAAM,EAAE;QACV,OAAO,MAAM,CAAC;KACf;IAED,8EAA8E;IAC9E,MAAM,gBAAgB,GAAyB,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CACzD,GAAG,CAAC,OAAO,CAAC;QACV,+BAA+B,EAAE,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;KACrE,CAAC,CAAC;IACL,MAAM,KAAK,GAAkB,aAAK,CAAC,WAAW,CAAC,gBAAgB,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC,CAAC;IACxF,OAAO,CAAC,MAAM,KAAK,CAAC,+BAA+B,EAAE,CAAW,CAAC;AACnE,CAAC;AA3BD,kCA2BC","sourcesContent":["import { Principal } from '@dfinity/principal';\nimport * as CanisterStatus from './canisterStatus/index';\nimport { IDL } from '@dfinity/candid';\nimport { HttpAgent } from './agent/http';\nimport { Actor, ActorSubclass } from './actor';\n\n/**\n * Retrieves the Candid interface for the specified canister.\n *\n * @param agent The agent to use for the request (usually an `HttpAgent`)\n * @param canisterId A string corresponding to the canister ID\n * @returns Candid source code\n */\nexport async function fetchCandid(canisterId: string, agent?: HttpAgent): Promise<string> {\n  if (!agent) {\n    // Create an anonymous `HttpAgent` (adapted from Candid UI)\n    agent = new HttpAgent();\n    if (agent.isLocal()) {\n      agent.fetchRootKey();\n    }\n  }\n\n  // Attempt to use canister metadata\n  const status = await CanisterStatus.request({\n    agent,\n    canisterId: Principal.fromText(canisterId),\n    paths: ['candid'],\n  });\n  const candid = status.get('candid') as string | undefined;\n  if (candid) {\n    return candid;\n  }\n\n  // Use `__get_candid_interface_tmp_hack` for canisters without Candid metadata\n  const tmpHackInterface: IDL.InterfaceFactory = ({ IDL }) =>\n    IDL.Service({\n      __get_candid_interface_tmp_hack: IDL.Func([], [IDL.Text], ['query']),\n    });\n  const actor: ActorSubclass = Actor.createActor(tmpHackInterface, { agent, canisterId });\n  return (await actor.__get_candid_interface_tmp_hack()) as string;\n}\n"]}